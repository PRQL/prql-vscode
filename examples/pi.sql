WITH table_0 AS (
  SELECT
    50 AS num_digits
),
config AS (
  SELECT
    num_digits,
    10 * num_digits / 3 AS array_len,
    5 AS calc_len,
    10 * num_digits / 3 + 5 AS loop_len
  FROM
    table_0 AS table_1
),
table_6 AS (
  WITH RECURSIVE loop AS (
    SELECT
      num_digits,
      array_len,
      loop_len,
      0 AS _expr_0,
      0 AS _expr_1,
      0 AS _expr_2,
      [2 for i in range(array_len)] AS _expr_3,
      0 AS _expr_4,
      0 AS _expr_5,
      '' AS _expr_6
    FROM
      config
    UNION
    ALL
    SELECT
      num_digits,
      array_len,
      loop_len,
      _expr_12 AS _expr_15,
      _expr_11 AS _expr_16,
      _expr_10 AS _expr_17,
      _expr_9 AS _expr_18,
      _expr_8 AS _expr_19,
      _expr_7 AS _expr_20,
      CASE
        WHEN _expr_1 = 0 THEN ''
        WHEN 1 <= _expr_1
        AND _expr_1 <= array_len THEN ''
        WHEN _expr_1 = array_len + 1 THEN ''
        WHEN _expr_1 = array_len + 2 THEN _expr_13
        WHEN _expr_1 = array_len + 3 THEN _expr_14
        ELSE ''
      END
    FROM
      (
        SELECT
          num_digits,
          array_len,
          loop_len,
          CASE
            WHEN _expr_1 = 0 THEN _expr_5
            WHEN 1 <= _expr_1
            AND _expr_1 <= array_len THEN _expr_5
            WHEN _expr_1 = array_len + 1 THEN _expr_5
            WHEN _expr_1 = array_len + 2 THEN CASE
              WHEN _expr_2 = 9 THEN _expr_5
              WHEN _expr_2 = 10 THEN 0
              WHEN _expr_0 = 2 THEN _expr_2
              WHEN _expr_0 > 2 THEN _expr_2
              ELSE _expr_2
            END
            WHEN _expr_1 = array_len + 3 THEN _expr_5
            ELSE _expr_5
          END AS _expr_7,
          CASE
            WHEN _expr_1 = 0 THEN _expr_4
            WHEN 1 <= _expr_1
            AND _expr_1 <= array_len THEN _expr_4
            WHEN _expr_1 = array_len + 1 THEN _expr_4
            WHEN _expr_1 = array_len + 2 THEN CASE
              WHEN _expr_2 = 9 THEN _expr_4 + 1
              WHEN _expr_2 = 10 THEN 0
              WHEN _expr_0 = 2 THEN _expr_4
              WHEN _expr_0 > 2 THEN _expr_4
              ELSE _expr_4
            END
            WHEN _expr_1 = array_len + 3 THEN CASE
              WHEN _expr_2 <> 9
              AND _expr_2 <> 10
              AND _expr_4 <> 0 THEN 0
              ELSE _expr_4
            END
            ELSE _expr_4
          END AS _expr_8,
          CASE
            WHEN _expr_1 = 0 THEN _expr_3
            WHEN 1 <= _expr_1
            AND _expr_1 <= array_len THEN [CASE WHEN i==_expr_1 THEN (10*_expr_3[i] + _expr_2 *(array_len - i + 1)
          ) %(2 *(array_len - i) + 1)
          ELSE _expr_3 [i]
      END for i in generate_series(1, array_len) ]
      WHEN _expr_1 = array_len + 1 THEN [CASE WHEN i==array_len THEN _expr_2%10 ELSE _expr_3[i]
  END for i in generate_series(1, array_len) ]
  WHEN _expr_1 = array_len + 2 THEN _expr_3
  WHEN _expr_1 = array_len + 3 THEN _expr_3
  ELSE _expr_3
END AS _expr_9,
CASE
  WHEN _expr_1 = 0 THEN 0
  WHEN 1 <= _expr_1
  AND _expr_1 <= array_len THEN (
    10 * _expr_3 [_expr_1] + _expr_2 * (array_len - _expr_1 + 1)
  ) / (2 * (array_len - _expr_1) + 1)
  WHEN _expr_1 = array_len + 1 THEN _expr_2 / 10
  WHEN _expr_1 = array_len + 2 THEN _expr_2
  WHEN _expr_1 = array_len + 3 THEN _expr_2
  ELSE _expr_2
END AS _expr_10,
(_expr_1 + 1) % loop_len AS _expr_11,
CASE
  WHEN _expr_1 = 0 THEN _expr_0 + 1
  ELSE _expr_0
END AS _expr_12,
_expr_1,
CASE
  WHEN _expr_2 = 9 THEN ''
  WHEN _expr_2 = 10 THEN (_expr_5 + 1) :: string || repeat('0', _expr_4)
  WHEN _expr_0 = 2 THEN _expr_5 :: string || '.'
  WHEN _expr_0 > 2 THEN _expr_5 :: string
  ELSE ''
END AS _expr_13,
CASE
  WHEN _expr_2 <> 9
  AND _expr_2 <> 10
  AND _expr_4 <> 0 THEN repeat('9', _expr_4)
  ELSE ''
END AS _expr_14,
_expr_2,
_expr_4
FROM
  loop AS table_2
WHERE
  _expr_0 < num_digits + 1
) AS table_3
)
SELECT
  *
FROM
  loop
)
SELECT
  string_agg(_expr_6, '') AS pi
FROM
  table_6 AS table_5

-- Generated by PRQL compiler version:0.6.1 target:sql.duckdb (https://prql-lang.org)
